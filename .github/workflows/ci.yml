name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "--cfg ci"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
        rust: [stable, beta]
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Install Rust
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # master
      with:
        toolchain: ${{ matrix.rust }}
        targets: x86_64-unknown-linux-musl,aarch64-unknown-linux-musl
    - name: Install cross-compilation tools for both architectures
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu gcc-x86-64-linux-gnu
    - name: Cache cargo registry
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: Verify cross-compilation setup
      run: |
        echo "Installed targets:"
        rustup target list --installed
        echo "Cargo version:"
        cargo --version
        echo "Rustc version:"
        rustc --version
        echo "Available linkers:"
        which x86_64-unknown-linux-musl-gcc || echo "x86_64-unknown-linux-musl-gcc not found"
        which x86_64-linux-musl-gcc || echo "x86_64-linux-musl-gcc not found"
        which musl-gcc || echo "musl-gcc not found"
        which aarch64-linux-gnu-gcc || echo "aarch64-linux-gnu-gcc not found"
        which rust-lld || echo "rust-lld not found"
        echo "Cargo config:"
        cat .cargo/config.toml || echo "No cargo config found"
    - name: Build
      run: make build-verbose
    - name: Run unit tests
      run: make test-verbose
    - name: Run e2e tests
      run: make test-e2e-verbose

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Install Rust
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: make check-fmt

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Install Rust
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
      with:
        toolchain: stable
        components: clippy
    - name: Run clippy
      run: make lint

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Install Rust
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
      with:
        toolchain: stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Install Rust
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
      with:
        toolchain: stable
        targets: x86_64-unknown-linux-musl,aarch64-unknown-linux-musl
    - name: Install musl tools
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu
    - name: Setup cargo config for cross-compilation
      run: |
        mkdir -p .cargo
        cat > .cargo/config.toml << 'EOF'
        [target.x86_64-unknown-linux-musl]
        linker = "x86_64-linux-musl-gcc"

        [target.aarch64-unknown-linux-musl]
        linker = "aarch64-linux-gnu-gcc"
        EOF
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3
    - name: Build krust
      run: cargo build --release
    - name: Add krust to PATH
      run: echo "${{ github.workspace }}/target/release" >> $GITHUB_PATH
    - name: Test krust version
      run: krust version
    - name: Build and run example with krust
      run: |
        cd example/hello-krust
        # Build and push to ttl.sh (ephemeral registry)
        export KRUST_REPO=ttl.sh/${{ github.run_id }}
        IMAGE_REF=$(krust build ./)
        echo "Built image: $IMAGE_REF"
        # Run the image
        docker run --rm $IMAGE_REF
    - name: Test docker run with command substitution
      run: |
        cd example/hello-krust
        export KRUST_REPO=ttl.sh/${{ github.run_id }}-test2
        docker run --rm $(krust build ./)
    - name: Test build with --no-push
      run: |
        cd example/hello-krust
        krust build --no-push --image local.test/hello:latest ./
    - name: Test multi-arch build and run
      run: |
        cd example/hello-krust
        # Build for both platforms and push
        export KRUST_REPO=ttl.sh/${{ github.run_id }}-multiarch
        IMAGE_REF=$(krust build --platform linux/amd64,linux/arm64 ./)
        echo "Built multi-arch image: $IMAGE_REF"
        # Run the image - should automatically select the right architecture
        docker run --rm $IMAGE_REF

  # Test extended platform support
  extended-platforms:
    name: Extended Platform Support
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Install Rust
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
      with:
        toolchain: stable
        targets: x86_64-unknown-linux-musl,i686-unknown-linux-musl,aarch64-unknown-linux-musl,armv7-unknown-linux-musleabihf
    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools gcc-multilib
    - name: Setup cargo config
      run: |
        mkdir -p .cargo
        cat > .cargo/config.toml << 'EOF'
        [target.x86_64-unknown-linux-musl]
        linker = "x86_64-linux-musl-gcc"

        [target.i686-unknown-linux-musl]
        linker = "musl-gcc"
        rustflags = ["-C", "target-cpu=i686"]

        [target.aarch64-unknown-linux-musl]
        linker = "aarch64-linux-gnu-gcc"

        [target.armv7-unknown-linux-musleabihf]
        linker = "arm-linux-gnueabihf-gcc"
        EOF
    - name: Build krust
      run: cargo build --release
    - name: Test multi-platform build with Alpine base
      run: |
        # Test that platform detection works (even if we can't build all platforms)
        ./target/release/krust build --no-push --image test.local/alpine-test:latest ./example/alpine-base 2>&1 | tee build.log

        # Verify platform detection happened
        grep -q "Detecting available platforms from base image: alpine:latest" build.log
        grep -q "Found platforms:" build.log

  # Takes too long to run on CI, so it's commented out for now.
  # coverage:
  #   name: Code coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Install Rust
  #     uses: dtolnay/rust-toolchain@stable
  #   - name: Install cargo-tarpaulin
  #     run: cargo install cargo-tarpaulin
  #   - name: Generate code coverage
  #     run: cargo tarpaulin --verbose --workspace
